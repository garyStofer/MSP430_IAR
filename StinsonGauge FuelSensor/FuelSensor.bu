#include <msp430x20x3.h>
// Global variable, visible to ISR
unsigned short  isr_cnt;
unsigned short  F_Osc; 


#pragma vector=WDT_VECTOR
__interrupt void wdt_ISR(void)
{
    // SR is cleared, Only NMI interrupts can interrupt this 
    F_Osc = isr_cnt; // capture the frequncy counter and reset
    isr_cnt = 0;
    LPM0_EXIT;
}

//
// PORT 1 Interrupt Service Routine -- 
// making an edge counter with p1 interrupt and watchdog timer 
// Counting endges on P1.0 input -- Oscillator frequency from fuel sensor capacitor
//

#pragma vector=PORT1_VECTOR
__interrupt void port1_ISR (void)
{
  isr_cnt++;
  P1IFG = 0;      // clear the interrupt flag 
}


#pragma vector = SD16_VECTOR
__interrupt void SD16ISR(void)
{
    SD16CCTL0 &= ~SD16IFG;  // Clear the interrupt flag.
    LPM0_EXIT;              // change the power mode on the stack so that device keeps running after rti
}

// ------------ END of ISRs ---------------// 
int Read_ADC(int inctl0)
{
  // See setup of ADC in init();
  SD16INCTL0 = inctl0;    // input selection -- gain == 1 , 4th conversion causes interrupt  max range = +- 0.6V 
  SD16CCTL0 |=  SD16SC;   // Start Conversion
  
  LPM0; // sleep until conversion is done and iterrupt wakes the cpu up again
  return (SD16MEM0);         // Capture the ADC value ;
}

void init(void)
{
    // Stop watchdog timer first 
  WDTCTL = WDTPW + WDTHOLD;
  
  P1SEL=0;    // set all pins to digital IO first
  
  // Port 2 is used for Xtal 
  P2SEL= 0xff;   // using P2.6 and P2.7 as watch xtal in''
  P2DIR = 0x80;  // P2.7 = output , P2.6 = input  
  P2OUT = 0;     // low
  P2IE =0;
  
  
  // Clock selection  1 Mhz 
  // Set ACLK = VLO
  // Set MCLK = SMCLK = DCO = 1MHz
  
  DCOCTL  = CALDCO_16MHZ;  // CAL data for DCO modulator
  BCSCTL1 = CALBC1_16MHZ;  // CAL data for DCO -- ACKL div /1 
  BCSCTL2 = 0;             // reset condition = 0, MCLK = SMCLK = DCO , no dividers
  BCSCTL3 = LFXT1S_0;      // ==  32khz xtal used for watchdog interval timer 
  
   
  WDTCTL = WDT_ADLY_250; // using ACLK = 32Khz  
  IE1 = WDTIE  ;          // enable the maskable interrupt for the watchdog interval timer 
 
  // P1.0 used as analog input 
  // P1.1 used for Fuel cap osc. in
  // P1.2 used for Timer_A2 output 
  // P1.3 used for Vref output (to bypass cap) 
  
  // Port setups
  P1OUT = 0;        // no Pull down for Osc in
  P1REN = 0;        // no Pull up resistor 
  
  
  P1DIR = 0xFd;       // Using P1.1 as input to count freq. from Sensing element
  P1IE  = BIT1;       // Enables interrupt from P1.1 
  P1IES = 0xff;       // high to low tansition
  P1IFG = 0x00;       // clear interrupt flag

//  P1OUT |= BIT2; // see if out works 
  
  //  Resistor divisor 12.69K- 406Ohms -- 1 bit == 590.646e-6 
  // ADC setup 
  SD16AE =  SD16AE0;      // Analog input enable for P1.0  == A0+ , A0- internally connected to VSS
  SD16CTL = SD16REFON|    // Internal 1.2V Ref ON
            SD16SSEL_1 |  // SMCLK clock sel for ADC  
            SD16XDIV_2 ;  // Clock divisor 16 == 1Mhz  if SMCLK is at 16mhz

  SD16CCTL0 = SD16OSR_512|  // oversampling rate 512
              SD16SNGL|     // Single Conversion mode
              SD16DF|       // Data Format 1 == Two's complement, ( Bipolar )
              SD16IE;       // Interrupt enable
          
  // Select alternate funstions 
  P1SEL = BIT3;  // Port 1.3 connections -- connect Vref to p1.3 for capacitor bypass
  
  
  // Timer A setup  so that it produces a PWM signal on Timer_A2.TA1 output with the
  // Frequncy controlled by compare register TACCR0 and the pulse with set by the 
  // value in TACCR1, so that a 50% pulse with is achieved when TACCR1 = 1/2 of TCCR0
  // The output signal is generated in hardware, no interrupts are used 
 
  TACCR0 = 1000;    // Periode in SMCKL clocks 16Mhz SMCLK == 1.6Khz when TACCR0 = 10000
  TACCR1 = 300;     // 3000 == 30% duty cycle 
  
  // Compare mode for PWM  with Reset output on reaching threshold in compare register, Set on counter overflow to 0
  // no interrupts are created 
  TACCTL0 = 0;          // Nothing used -- 
  TACCTL1 = OUTMOD_7;   // Reset/Set -- This causes the output to be cleared upon reaching TCCR1 and set when the counter
                        // hits TACCR0 and reloads to 0 agian. This produces a positive pulse that inceases in duration 
                        // With increasing values in TACCR1

  TACTL = TASSEL_2| /* Timer A clock source select: 1 - SmCLK  */
          MC_1|     // Counting mode: up to TACCR0
          TACLR;    // Timer A clear -- clears the count register
  
   
   // Select alternate Pin IO funstions 
   P1SEL = BIT3;  // Port 1.3 connections -- connect Vref to p1.3 for capacitor bypass
   P1SEL = BIT2;  // makes Timer_A2.TA1 output appear (PW signal)  
    
  _BIS_SR(GIE) ; //Enable interrups 
} 
   
#define F_MIN 30000/4 // Sensor Frequency when full
  short i;
#define F_MAX 50000/4 // Sensor Frequency when empty
void main( void )
{
  unsigned short result[3];
  short Delta_F;

  init();
  static float V_bat;
  
  //  Read Offset Vcc 
  result[0] = Read_ADC(SD16INCH_7); // offset
  
  while (1)
  {
      //  Go to sleep until WDT interval timer wakes up - 
     // P1 Interrupt counts edges on P1.0 in the mean time 
   // _BIS_SR(LPM3_bits); 

    LPM0; // sleep until watchdog timer interval is up 

    Delta_F = F_MAX - F_Osc; 
    
    // PWM claculation
    //  TACCR1 =( F_Osc - F_MAX ) / ( (F_MAX-F_MIN) / TACCR0);
    // have to make sure that PW value stays within 0 and TACCR0
    if (Delta_F < 0 )
      Delta_F = 0;
        
    //  Read V-Battery
    result[1] = Read_ADC(SD16INCH_0); // volt 12.1K - 470o divider (0.6v == 0x7fff) 1 Bit == 489.723 e-6 volt
    result[1] -=   result[0];         // remove PGA offset  
                                      // 
    
    V_bat = result[1] * (489.723e-6);   // convert to voltage 
    V_bat -= 11.31; 
    V_bat *= 0.1066;
    V_bat += 1.0;
    
   // TACCR1 = Delta_F /5;
   //  
    // Calculate the PW timing for the output signal according to oscillator and V_batt
     TACCR1  =Delta_F / 6.0 * V_bat;
    
    
    
    
    
    

  }
}

