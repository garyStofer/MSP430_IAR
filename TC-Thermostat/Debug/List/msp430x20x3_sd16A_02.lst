##############################################################################
#                                                                            #
# IAR MSP430 C/C++ Compiler V3.41A/W32  [Kickstart]    08/Dec/2006  17:09:39 #
# Copyright 1996-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    __rt_version  =  2                                                      #
#    __double_size =  32                                                     #
#    __reg_r4      =  free                                                   #
#    __reg_r5      =  free                                                   #
#    __pic         =  no                                                     #
#    __core        =  64kb                                                   #
#    Source file   =  C:\iarprojects\SD16_tempDemo\msp430x20x3_sd16A_02.c    #
#    Command line  =  C:\iarprojects\SD16_tempDemo\msp430x20x3_sd16A_02.c    #
#                     -lCN C:\iarprojects\SD16_tempDemo\Debug\List\ -o       #
#                     C:\iarprojects\SD16_tempDemo\Debug\Obj\ -z9 --debug    #
#                     -e --double=32 -I "C:\Program Files\IAR                #
#                     Systems\Embedded Workbench 4.0\430\INC\" -I            #
#                     "C:\Program Files\IAR Systems\Embedded Workbench       #
#                     4.0\430\INC\CLIB\" --reduce_stack_usage                #
#    List file     =  C:\iarprojects\SD16_tempDemo\Debug\List\msp430x20x3_sd #
#                     16A_02.lst                                             #
#    Object file   =  C:\iarprojects\SD16_tempDemo\Debug\Obj\msp430x20x3_sd1 #
#                     6A_02.r43                                              #
#                                                                            #
#                                                                            #
##############################################################################

C:\iarprojects\SD16_tempDemo\msp430x20x3_sd16A_02.c
      1          #include  <msp430x20x3.h>

   \                                 In segment DATA16_AN, at 0x0
   \   unsigned char volatile __data16 IE1
   \                     IE1:
   \   000000                DS8 1

   \                                 In segment DATA16_AN, at 0x56
   \   unsigned char volatile __data16 DCOCTL
   \                     DCOCTL:
   \   000000                DS8 1

   \                                 In segment DATA16_AN, at 0x57
   \   unsigned char volatile __data16 BCSCTL1
   \                     BCSCTL1:
   \   000000                DS8 1

   \                                 In segment DATA16_AN, at 0x58
   \   unsigned char volatile __data16 BCSCTL2
   \                     BCSCTL2:
   \   000000                DS8 1

   \                                 In segment DATA16_AN, at 0x21
   \   unsigned char volatile __data16 P1OUT
   \                     P1OUT:
   \   000000                DS8 1

   \                                 In segment DATA16_AN, at 0x22
   \   unsigned char volatile __data16 P1DIR
   \                     P1DIR:
   \   000000                DS8 1

   \                                 In segment DATA16_AN, at 0xb0
   \   unsigned char volatile __data16 SD16INCTL0
   \                     SD16INCTL0:
   \   000000                DS8 1

   \                                 In segment DATA16_AN, at 0xb7
   \   unsigned char volatile __data16 SD16AE
   \                     SD16AE:
   \   000000                DS8 1

   \                                 In segment DATA16_AN, at 0x100
   \   unsigned short volatile __data16 SD16CTL
   \                     SD16CTL:
   \   000000                DS8 2

   \                                 In segment DATA16_AN, at 0x102
   \   unsigned short volatile __data16 SD16CCTL0
   \                     SD16CCTL0:
   \   000000                DS8 2

   \                                 In segment DATA16_AN, at 0x112
   \   unsigned short volatile __data16 SD16MEM0
   \                     SD16MEM0:
   \   000000                DS8 2

   \                                 In segment DATA16_AN, at 0x78
   \   union <unnamed> __data16 _A_USICTL0
   \                     _A_USICTL0:
   \   000000                DS8 2

   \                                 In segment DATA16_AN, at 0x7a
   \   union <unnamed> __data16 _A_USICKCTL
   \                     _A_USICKCTL:
   \   000000                DS8 2

   \                                 In segment DATA16_AN, at 0x7c
   \   union <unnamed> __data16 _A_USISRL
   \                     _A_USISRL:
   \   000000                DS8 2

   \                                 In segment DATA16_AN, at 0x120
   \   unsigned short volatile __data16 WDTCTL
   \                     WDTCTL:
   \   000000                DS8 2

   \                                 In segment DATA16_AN, at 0x10f8
   \   unsigned char const volatile __data16 CALDCO_16MHZ
   \                     CALDCO_16MHZ:
   \   000000                DS8 1

   \                                 In segment DATA16_AN, at 0x10f9
   \   unsigned char const volatile __data16 CALBC1_16MHZ
   \                     CALBC1_16MHZ:
   \   000000                DS8 1
      2          #define AVERAGE_COUNT 32
      3          // transmit Command address data pair for 7301 port expander , make sure the MSB 
      4          // of the command byte is not set when calling for a write.

   \                                 In segment CODE, align 2
      5          void
      6          SPI_send( unsigned char command, unsigned char data )
   \                     SPI_send:
      7          {
      8              
      9              USISRH = command ;        // MSB = 0 == write for 7301 14..8 = Command 
   \   000000   C24C7D00     MOV.B   R12, &0x7d
     10              USISRL = data;            // LSB = data to be written
   \   000004   C24E7C00     MOV.B   R14, &0x7c
     11              P1OUT &= ~0x1 ;           // set CS active (low) 
   \   000008   D2C32100     BIC.B   #0x1, &0x21
     12              USICNT = USI16B+16;       // start sending 16 bits -- 16Bit Mode set
   \   00000C   F24050007B00 MOV.B   #0x50, &0x7b
     13              
     14              while(!( USICTL1 & USIIFG)) // poll USI interrupt flag until transmission done 
   \                     ??SPI_send_0:
   \   000012   D2B37900     BIT.B   #0x1, &0x79
   \   000016   FD2B         JNC     ??SPI_send_0
     15                ;
     16              P1OUT |= 0x1;               // clear the CS for 7300 -- latches the data 
   \   000018   D2D32100     BIS.B   #0x1, &0x21
     17          }
   \   00001C   3041         RET
     18          
     19          
     20          

   \                                 In segment CODE, align 2
     21          unsigned char 
     22          SPI_read(unsigned char command)
   \                     SPI_read:
     23          {
     24            
     25              command |= 0x80;  // MSB = 1 == read for 7301 14..8 = Command 
     26              SPI_send( command, 0 ); // latch the read address with the read request bit set
   \   000000   4E43         MOV.B   #0x0, R14
   \   000002   7CD08000     BIS.B   #0x80, R12
   \   000006   B012....     CALL    #SPI_send
     27              SPI_send( 0, 0 );       // Clock out the data for the latched address
   \   00000A   4E43         MOV.B   #0x0, R14
   \   00000C   4C43         MOV.B   #0x0, R12
   \   00000E   B012....     CALL    #SPI_send
     28             
     29              return USISRL;
   \   000012   5C427C00     MOV.B   &0x7c, R12
   \   000016   3041         RET
     30          }
     31          
     32          
     33          // Init USI for 16 bit SPI use in master mode. 
     34          // Interrupts are not used, transmitting code polls the interrupt flag during transmissions.
     35          // Clock phase is selected so that raising edge is centered in SDO
     36          // Clock frequency is selected to be 1/2 of SMCLK  -- SMCLK is controlled outside this 
     37          // function through BCSCTL2 
     38          

   \                                 In segment CODE, align 2
     39          void
     40          SPI_Init( void )  // based on a 16Mhz MCLK and 8Mhz SMCLK !
   \                     SPI_Init:
     41          {
     42            // Universal Serial Interface configuration 
     43            USICTL0 = USIPE5+USIPE6+USIPE7+USIMST+USISWRST+USIOE ; // PortIOs & USI Master mode, Hold in Reset, Enable IOs 
   \   000000   F240EB007800 MOV.B   #0xeb, &0x78
     44            USICTL1 = USICKPH;                              // No  USI interrupts, Set clock phase  
   \   000006   F24080007900 MOV.B   #0x80, &0x79
     45            USICKCTL = USIDIV_1+USISSEL_2 ;                 // Setup USI clocks: SCL = SMCLK/2 == 8 Mhz/2 ~= 4Mhz 
   \   00000C   F24028007A00 MOV.B   #0x28, &0x7a
     46            USICTL0 &= ~USISWRST;                           // Enable USI
   \   000012   D2C37800     BIC.B   #0x1, &0x78
     47            USICTL1 &= ~USIIFG;                             // Clear pending flag
   \   000016   D2C37900     BIC.B   #0x1, &0x79
     48          }
   \   00001A   3041         RET
     49          
     50          
     51          // Coefficients for inverse polinomial to compute temp from voltage. 
     52          
     53          // temperature  = d_0 + d_1*E  + d_2*E^2 + ... + d_n*E^n 
     54          // where temp is in deg C, E is in mv
     55          // 
     56          // J-Type coeff
     57          /*
     58          float TC_coeff[] = {  0.0, // d0
     59                               1.978425E+01, // d1
     60                              -2.001204E-01, // d2
     61                              1.036969E-02 , // d3
     62                              -2.549687E-04, // d4
     63                               3.585153E-06, // d5
     64                              -5.344285E-08, // d6
     65                               5.099890E-10  // d7
     66                            };
     67          */
     68          // K-Type coeff

   \                                 In segment DATA16_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy
     69          float TC_coeff[] = {  0.0, // d0
   \                     TC_coeff:
   \   000000                DS8 32
   \   000020                REQUIRE `?<Initializer for TC_coeff>`
     70                               2.508355E+1, // d1
     71                               7.860106E-2, // d2
     72                              -2.503131E-1, // d3
     73                               8.315270E-2, // d4
     74                              -1.228034E-2, // d5
     75                               9.804036E-4, // d6
     76                              -4.413030E-5  // d7
     77                            };

   \                                 In segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     78          float TC_Temp;
   \                     TC_Temp:
   \   000000                DS8 4
     79          

   \                                 In segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     80          float Temp;
   \                     Temp:
   \   000000                DS8 4

   \                                 In segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     81          float C_Temp;
   \                     C_Temp:
   \   000000                DS8 4

   \                                 In segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     82          char avg_cnt;
   \                     avg_cnt:
   \   000000                DS8 1

   \                                 In segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     83          float T_avg = 0;
   \                     T_avg:
   \   000000                DS8 4
     84          
     85          #pragma vector=SD16_VECTOR

   \                                 In segment CODE, align 2
     86          __interrupt void SD16ISR(void)
   \                     SD16ISR:
     87          { 
   \   000000   0A12         PUSH.W  R10
   \   000002   0B12         PUSH.W  R11
   \   000004   0812         PUSH.W  R8
   \   000006   0912         PUSH.W  R9
   \   000008   0612         PUSH.W  R6
   \   00000A   0712         PUSH.W  R7
   \   00000C   0412         PUSH.W  R4
   \   00000E   0512         PUSH.W  R5
   \   000010   0D12         PUSH.W  R13
   \   000012   0C12         PUSH.W  R12
   \   000014   0F12         PUSH.W  R15
   \   000016   0E12         PUSH.W  R14
   \   000018   31801000     SUB.W   #0x10, SP
     88             float E;
     89             P1OUT = 0;
   \   00001C   C2432100     MOV.B   #0x0, &0x21
     90            // Vtemp = ((int) SD16MEM0 - ADC_offs) * (1.2 / 0xffff)  ;
     91            // Vtemp /= 1.32e-3; // the Temp Coefficient per deg/K
     92              // therefore :
     93            // Vref / maxcount / TempCoeff = ScaleFactor  
     94            // 1.2V / 65532    / 1.32e-3   = 13.87183e-3  
     95           
     96            if (SD16INCTL0 == SD16INCH_6 )  // internal Temp sensor -- Cold Junction temp
   \   000020   F2900600B000 CMP.B   #0x6, &0xb0
   \   000026   1C421201     MOV.W   &0x112, R12
   \   00002A   0D4C         MOV.W   R12, R13
   \   00002C   1C20         JNE     ??SD16ISR_0
     97            {
     98              C_Temp = ((int) SD16MEM0 ) * 13.87183e-3;
   \   00002E   B012....     CALL    #?Subroutine3
   \                     ??CrossCallReturnLabel_8:
   \   000032   3E40AC46     MOV.W   #0x46ac, R14
   \   000036   3F40633C     MOV.W   #0x3c63, R15
   \   00003A   B012....     CALL    #_Mul32f
   \   00003E   824C....     MOV.W   R12, &C_Temp
   \   000042   824D....     MOV.W   R13, &C_Temp + 2
     99              // calibration (op-amp) offset is taken out via the number below
    100              C_Temp -= 270;     // convert to deg/C (-273) and  PGA offset 
   \   000046   0E43         MOV.W   #0x0, R14
   \   000048   3F4087C3     MOV.W   #0xc387, R15
   \   00004C   B012....     CALL    #_Add32f
   \   000050   824C....     MOV.W   R12, &C_Temp
   \   000054   824D....     MOV.W   R13, &C_Temp + 2
    101            
    102              
    103              // calc TC cold junction emf equivalent from Vtemp so it can be added to TC voltage
    104           // not done yet, might not have enough flash to hold an other 5th degree poliniomial and coefficients 
    105           // so for now, just using the temp and add it to the temp calculated from  the TC -- slight error because 
    106           // we are not exactly in the right place of the curve 
    107             
    108              // differential input on P1.2 / P1.3  
    109              SD16AE =  SD16AE2 | SD16AE3; // Analog enable for P1.2 and P1.3  
   \   000058   F2400C00B700 MOV.B   #0xc, &0xb7
    110              SD16INCTL0 = SD16INCH_1 |SD16GAIN_32;  ; // switch to A1 and gain 32 for next time through 
   \   00005E   F2402900B000 MOV.B   #0x29, &0xb0
    111              return;
   \   000064   993C         JMP     ??SD16ISR_1
    112            }
    113            // else 
    114            
    115            // E = ((int) SD16MEM0 - ADC_offs) * (1.2 / 0xffff)  ;  // multiply by bit value 
    116            // E /= 32.00 ;   // divide by gain 
    117            // E *= 1000 ;   // make E in mV
    118            
    119             E = ((int) SD16MEM0 ) * 5.722133211e-4;
   \                     ??SD16ISR_0:
   \   000066   B012....     CALL    #?Subroutine3
   \                     ??CrossCallReturnLabel_9:
   \   00006A   3E409600     MOV.W   #0x96, R14
   \   00006E   3F40163A     MOV.W   #0x3a16, R15
   \   000072   B012....     CALL    #_Mul32f
   \   000076   064C         MOV.W   R12, R6
   \   000078   074D         MOV.W   R13, R7
    120          
    121          // temperature  = d_0 + d_1*E  + d_2*E^2 + ... + d_n*E^n 
    122             TC_Temp = E * TC_coeff[1];
    123             TC_Temp += E*E * TC_coeff[2] ;
    124             TC_Temp += E*E*E * TC_coeff[3] ;
    125             TC_Temp += E*E*E*E * TC_coeff[4] ;
    126             TC_Temp += E*E*E*E*E * TC_coeff[5] ;   // calc to the fifth degree polinomial
    127             TC_Temp += E*E*E*E*E*E * TC_coeff[6] ;
    128             TC_Temp += E*E*E*E*E*E*E * TC_coeff[7] ; 
    129             
    130             // remove offset here
    131             // J_TEMP += offset ;
    132             TC_Temp -= 2.0;  // adc offset compensation
   \   00007A   0E4C         MOV.W   R12, R14
   \   00007C   0F4D         MOV.W   R13, R15
   \   00007E   B012....     CALL    #?Subroutine4
   \                     ??CrossCallReturnLabel_10:
   \   000082   B012....     CALL    #?Subroutine2
   \                     ??CrossCallReturnLabel_4:
   \   000086   084C         MOV.W   R12, R8
   \   000088   094D         MOV.W   R13, R9
   \   00008A   B012....     CALL    #?Subroutine2
   \                     ??CrossCallReturnLabel_5:
   \   00008E   814C0400     MOV.W   R12, 0x4(SP)
   \   000092   814D0600     MOV.W   R13, 0x6(SP)
   \   000096   B012....     CALL    #?Subroutine2
   \                     ??CrossCallReturnLabel_6:
   \   00009A   814C0800     MOV.W   R12, 0x8(SP)
   \   00009E   814D0A00     MOV.W   R13, 0xa(SP)
   \   0000A2   B012....     CALL    #?Subroutine2
   \                     ??CrossCallReturnLabel_7:
   \   0000A6   814C0C00     MOV.W   R12, 0xc(SP)
   \   0000AA   814D0E00     MOV.W   R13, 0xe(SP)
   \   0000AE   1E42....     MOV.W   &TC_coeff + 8, R14
   \   0000B2   1F42....     MOV.W   &TC_coeff + 10, R15
   \   0000B6   0C4A         MOV.W   R10, R12
   \   0000B8   0D4B         MOV.W   R11, R13
   \   0000BA   B012....     CALL    #?Subroutine4
   \                     ??CrossCallReturnLabel_11:
   \   0000BE   1E42....     MOV.W   &TC_coeff + 4, R14
   \   0000C2   1F42....     MOV.W   &TC_coeff + 6, R15
   \   0000C6   0C46         MOV.W   R6, R12
   \   0000C8   0D47         MOV.W   R7, R13
   \   0000CA   B012....     CALL    #_Mul32f
   \   0000CE   814C0000     MOV.W   R12, 0x0(SP)
   \   0000D2   814D0200     MOV.W   R13, 0x2(SP)
   \   0000D6   1E42....     MOV.W   &TC_coeff + 12, R14
   \   0000DA   1F42....     MOV.W   &TC_coeff + 14, R15
   \   0000DE   0C48         MOV.W   R8, R12
   \   0000E0   0D49         MOV.W   R9, R13
   \   0000E2   B012....     CALL    #?Subroutine1
   \                     ??CrossCallReturnLabel_2:
   \   0000E6   1E42....     MOV.W   &TC_coeff + 16, R14
   \   0000EA   1F42....     MOV.W   &TC_coeff + 18, R15
   \   0000EE   1C410400     MOV.W   0x4(SP), R12
   \   0000F2   1D410600     MOV.W   0x6(SP), R13
   \   0000F6   B012....     CALL    #?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   0000FA   1E42....     MOV.W   &TC_coeff + 20, R14
   \   0000FE   1F42....     MOV.W   &TC_coeff + 22, R15
   \   000102   1C410800     MOV.W   0x8(SP), R12
   \   000106   1D410A00     MOV.W   0xa(SP), R13
   \   00010A   B012....     CALL    #?Subroutine1
   \                     ??CrossCallReturnLabel_3:
   \   00010E   1E42....     MOV.W   &TC_coeff + 24, R14
   \   000112   1F42....     MOV.W   &TC_coeff + 26, R15
   \   000116   1C410C00     MOV.W   0xc(SP), R12
   \   00011A   1D410E00     MOV.W   0xe(SP), R13
   \   00011E   B012....     CALL    #?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   000122   0E46         MOV.W   R6, R14
   \   000124   0F47         MOV.W   R7, R15
   \   000126   1C410C00     MOV.W   0xc(SP), R12
   \   00012A   1D410E00     MOV.W   0xe(SP), R13
   \   00012E   B012....     CALL    #_Mul32f
   \   000132   1E42....     MOV.W   &TC_coeff + 28, R14
   \   000136   1F42....     MOV.W   &TC_coeff + 30, R15
   \   00013A   B012....     CALL    #_Mul32f
   \   00013E   044C         MOV.W   R12, R4
   \   000140   054D         MOV.W   R13, R5
   \   000142   0E4A         MOV.W   R10, R14
   \   000144   0F4B         MOV.W   R11, R15
   \   000146   2C41         MOV.W   0x0(SP), R12
   \   000148   1D410200     MOV.W   0x2(SP), R13
   \   00014C   B012....     CALL    #_Add32f
   \   000150   0E44         MOV.W   R4, R14
   \   000152   0F45         MOV.W   R5, R15
   \   000154   B012....     CALL    #_Add32f
   \   000158   0E43         MOV.W   #0x0, R14
   \   00015A   3F4000C0     MOV.W   #0xc000, R15
   \   00015E   B012....     CALL    #_Add32f
   \   000162   0E4C         MOV.W   R12, R14
   \   000164   0F4D         MOV.W   R13, R15
   \   000166   824C....     MOV.W   R12, &TC_Temp
   \   00016A   824D....     MOV.W   R13, &TC_Temp + 2
    133            // TC_Temp *= 1.085; // PGA gain compensation 
    134             Temp = C_Temp + TC_Temp;
    135            
    136             Temp *=1.08;
   \   00016E   1C42....     MOV.W   &C_Temp, R12
   \   000172   1D42....     MOV.W   &C_Temp + 2, R13
   \   000176   B012....     CALL    #_Add32f
   \   00017A   3E40713D     MOV.W   #0x3d71, R14
   \   00017E   3F408A3F     MOV.W   #0x3f8a, R15
   \   000182   B012....     CALL    #_Mul32f
   \   000186   824C....     MOV.W   R12, &Temp
   \   00018A   824D....     MOV.W   R13, &Temp + 2
    137             SD16INCTL0 = SD16INCH_6; // go back to measure internal temp again 
   \   00018E   F2400600B000 MOV.B   #0x6, &0xb0
    138             SD16AE = 0;              // remove Analog input enable for P1.2 and P1.3 -- makes internal temp meas unstable 
   \   000194   C243B700     MOV.B   #0x0, &0xb7
    139             
    140             // average multiple readings before sending out 
    141          /*   T_avg += Temp;
    142             if (avg_cnt++ >=1 )
    143             {
    144               Temp = T_avg/avg_cnt  * 1.08;  
    145               T_avg = 0;
    146               avg_cnt = 0;
    147             }
    148             */
    149          }
   \                     ??SD16ISR_1:
   \   000198   31501000     ADD.W   #0x10, SP
   \   00019C   3E41         POP.W   R14
   \   00019E   3F41         POP.W   R15
   \   0001A0   3C41         POP.W   R12
   \   0001A2   3D41         POP.W   R13
   \   0001A4   3541         POP.W   R5
   \   0001A6   3441         POP.W   R4
   \   0001A8   3741         POP.W   R7
   \   0001AA   3641         POP.W   R6
   \   0001AC   3941         POP.W   R9
   \   0001AE   3841         POP.W   R8
   \   0001B0   3B41         POP.W   R11
   \   0001B2   3A41         POP.W   R10
   \   0001B4   0013         RETI

   \                                 In segment CODE, align 2
   \                     ?Subroutine3:
   \   000000   3DE3         XOR.W   #0xffff, R13
   \   000002   0D5D         RLA.W   R13
   \   000004   0D7D         SUBC.W  R13, R13
   \   000006   3040....     BR      #_Cast32sto32f

   \                                 In segment CODE, align 2
   \                     ?Subroutine2:
   \   000000   0E46         MOV.W   R6, R14
   \   000002   0F47         MOV.W   R7, R15
   \   000004   3040....     BR      #_Mul32f

   \                                 In segment CODE, align 2
   \                     ?Subroutine1:
   \   000000   B012....     CALL    #_Mul32f
   \   000004   084C         MOV.W   R12, R8
   \   000006   094D         MOV.W   R13, R9
   \   000008   0E4A         MOV.W   R10, R14
   \   00000A   0F4B         MOV.W   R11, R15
   \   00000C   1C410200     MOV.W   0x2(SP), R12
   \   000010   1D410400     MOV.W   0x4(SP), R13
   \   000014   B012....     CALL    #_Add32f
   \   000018   044C         MOV.W   R12, R4
   \   00001A   054D         MOV.W   R13, R5
   \   00001C   3041         RET

   \                                 In segment CODE, align 2
   \                     ?Subroutine0:
   \   000000   B012....     CALL    #?Subroutine4
   \                     ??CrossCallReturnLabel_12:
   \   000004   0E48         MOV.W   R8, R14
   \   000006   0F49         MOV.W   R9, R15
   \   000008   0C44         MOV.W   R4, R12
   \   00000A   0D45         MOV.W   R5, R13
   \   00000C   B012....     CALL    #_Add32f
   \   000010   814C0200     MOV.W   R12, 0x2(SP)
   \   000014   814D0400     MOV.W   R13, 0x4(SP)
   \   000018   3041         RET

   \                                 In segment CODE, align 2
   \                     ?Subroutine4:
   \   000000   B012....     CALL    #_Mul32f
   \   000004   0A4C         MOV.W   R12, R10
   \   000006   0B4D         MOV.W   R13, R11
   \   000008   3041         RET
    150          
    151          // Watchdog Timer interrupt service routine
    152          #pragma vector=WDT_VECTOR

   \                                 In segment CODE, align 2
    153          __interrupt void watchdog_timer(void)
   \                     watchdog_timer:
    154          {
    155          //  P1OUT = 1;
    156            SD16CCTL0 |= SD16SC;                      // Start SD16 conversion
   \   000000   A2D30201     BIS.W   #0x2, &0x102
    157          }
   \   000004   0013         RETI
    158           
    159          
    160          

   \                                 In segment CODE, align 2
    161          void main(void)
   \                     main:
    162          {
    163             DCOCTL = CALDCO_16MHZ;
   \   000000   D242F8105600 MOV.B   &0x10f8, &0x56
    164             BCSCTL1 = CALBC1_16MHZ;
   \   000006   D242F9105700 MOV.B   &0x10f9, &0x57
    165             BCSCTL2 = DIVS_3;           // SMCLK = MCKL/8 =~ 2Mhz
   \   00000C   F24006005800 MOV.B   #0x6, &0x58
    166          
    167          
    168            WDTCTL = WDT_MDLY_32;                     // WDT Timer interval --  4ms 
   \   000012   B240185A2001 MOV.W   #0x5a18, &0x120
    169            IE1 |= WDTIE;                             // Enable WDT interrupt
   \   000018   D2D30000     BIS.B   #0x1, &0x0
    170            P1DIR = 0xff;                            // P1.0 to output direction
   \   00001C   F2432200     MOV.B   #0xff, &0x22
    171            P1OUT = 0;
   \   000020   C2432100     MOV.B   #0x0, &0x21
    172          
    173            SPI_Init();
   \   000024   B012....     CALL    #SPI_Init
    174            SPI_read(0x45);
   \   000028   7C404500     MOV.B   #0x45, R12
   \   00002C   B012....     CALL    #SPI_read
    175            
    176            // 1.2V ref, SMCLK
    177            SD16CTL = SD16REFON +SD16SSEL_1 + SD16DIV_3;        // 1.2V ref, SMCLK,   SMCLK /8
   \   000030   B240D4000001 MOV.W   #0xd4, &0x100
    178          
    179            SD16CCTL0 = SD16SNGL + SD16IE + SD16DF ;//  + SD16OSR_512 ;   // Single conv, interrupt -- 2's complement 
   \   000036   B24018040201 MOV.W   #0x418, &0x102
    180           
    181            SD16INCTL0 = SD16INCH_6;                  // initial internal temp
   \   00003C   F2400600B000 MOV.B   #0x6, &0xb0
    182           
    183            _BIS_SR(GIE +LPM0_bits );                 // Enter LPM0 with interrupt
   \   000042   32D01800     BIS.W   #0x18, SR
    184          }
   \   000046   3041         RET

   \                                 In segment INTVEC, offset 0xa, root
   \                     `??SD16ISR??INTVEC 10`:
   \   00000A   ....         DC16    SD16ISR

   \                                 In segment INTVEC, offset 0x14, root
   \                     `??watchdog_timer??INTVEC 20`:
   \   000014   ....         DC16    watchdog_timer

   \                                 In segment DATA16_ID, align 2, align-sorted
   \                     `?<Initializer for TC_coeff>`:
   \   000000   000000001CAB DC32 0H, 41C8AB1CH, 3DA0F998H, 0BE80290AH, 3DAA4BF6H, 0BC49337BH
   \            C84198F9A03D
   \            0A2980BEF64B
   \            AA3D7B3349BC
   \   000018   E380803A8C18 DC32 3A8080E3H, 0B839188CH
   \            39B8        

   Maximum stack usage in bytes:

     Function           CSTACK
     --------           ------
     SD16ISR               44
       -> _Cast32sto32f    44
       -> _Mul32f          44
       -> _Add32f          44
       -> _Cast32sto32f    44
       -> _Mul32f          44
       -> _Mul32f          44
       -> _Mul32f          44
       -> _Mul32f          44
       -> _Mul32f          44
       -> _Mul32f          44
       -> _Mul32f          44
       -> _Mul32f          44
       -> _Mul32f          44
       -> _Add32f          44
       -> _Mul32f          44
       -> _Add32f          44
       -> _Mul32f          44
       -> _Add32f          44
       -> _Mul32f          44
       -> _Add32f          44
       -> _Mul32f          44
       -> _Mul32f          44
       -> _Add32f          44
       -> _Add32f          44
       -> _Add32f          44
       -> _Add32f          44
       -> _Mul32f          44
     SPI_Init               2
     SPI_read               2
       -> SPI_send          2
       -> SPI_send          2
     SPI_send               2
     main                   2
       -> SPI_Init          2
       -> SPI_read          2
     watchdog_timer         4


   Segment part sizes:

     Function/Label              Bytes
     --------------              -----
     IE1                            1
     DCOCTL                         1
     BCSCTL1                        1
     BCSCTL2                        1
     P1OUT                          1
     P1DIR                          1
     SD16INCTL0                     1
     SD16AE                         1
     SD16CTL                        2
     SD16CCTL0                      2
     SD16MEM0                       2
     _A_USICTL0                     2
     _A_USICKCTL                    2
     _A_USISRL                      2
     WDTCTL                         2
     CALDCO_16MHZ                   1
     CALBC1_16MHZ                   1
     SPI_send                      30
     SPI_read                      24
     SPI_Init                      28
     TC_coeff                      32
     TC_Temp                        4
     Temp                           4
     C_Temp                         4
     avg_cnt                        1
     T_avg                          4
     SD16ISR                      438
     ?Subroutine3                  10
     ?Subroutine2                   8
     ?Subroutine1                  30
     ?Subroutine0                  26
     ?Subroutine4                  10
     watchdog_timer                 6
     main                          72
     ??SD16ISR??INTVEC 10           2
     ??watchdog_timer??INTVEC 20    2
     ?<Initializer for TC_coeff>   32

 
 682 bytes in segment CODE
  24 bytes in segment DATA16_AN
  32 bytes in segment DATA16_I
  32 bytes in segment DATA16_ID
  17 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 
 682 bytes of CODE  memory
  32 bytes of CONST memory (+  4 bytes shared)
  49 bytes of DATA  memory (+ 24 bytes shared)

Errors: none
Warnings: none
